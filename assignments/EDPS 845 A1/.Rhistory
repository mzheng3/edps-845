library ("lme4")
data(Orthodont, package="nlme")
Ortho
Orthodont
class(temp)
x<-c(5, 6, 1, 2, 3, 4, 5)
zscore <-function(x) {
out<- (x-mean(x))/sd(x)
class(out) <- "zscore"
return(out)
}
print.zscore<-function(x) {
print.default (round(x, 3))
}
myzs<-zscore(x)
View(print.zscore)
View(print.zscore)
myname <- "Emily"
i
class(myname)
myname
mean (x)
zscore <-function(x) {
out<- (x-mean(x))/sd(x)
class(out) <- "zscore"
return(out)
}
zscore
print.zscore<-function(x) {
print.default (round(x, 3))
}
myzs<-zscore(x)
myzs
ournames <- c("Emily" "Tony" "Katie")
help (solve)
?solve
help.start()
help (IRT)
help (solve)
help.start()
# The help function in HTML format by running
help.start()
??solve
x<- rnorm (100)
mean(x)
help (Rasch)
help (descriptives)
help (descriptive)
help (mean)
help (covariance)
help (variance)
help ("cov")
?cov
help (cov)
??solve
??cov
??IRT
?IRT
example(cov)
example(IRT)
example(Rasch)
example(solve)
install.packages("rmarkdown")
install.packages("knitr")
install.packages(c("BH", "boot", "car", "curl", "DescribeDisplay", "deSolve", "DiagrammeR", "digest", "equate", "equateIRT", "geosphere", "GGally", "ggmap", "ggplot2", "gridExtra", "gtable", "Hmisc", "htmltools", "htmlwidgets", "httr", "jsonlite", "kequate", "latticeExtra", "lava", "lme4", "mapdata", "maps", "MASS", "memoise", "mnormt", "msm", "munsell", "mvtnorm", "nlme", "OpenMx", "psych", "quantreg", "R6", "Rcpp", "RcppEigen", "RCurl", "rockchalk", "rstudioapi", "scales", "sem", "semTools", "sfsmisc", "simsem", "SNSequate", "sp", "statmod", "swirl", "testthat", "texreg", "visNetwork", "XML", "xtable", "zoo"))
predict_ad_revenue.R
vars10<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
10vars<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
.var10<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
_var10<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
.10v<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
.v10<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
_v10<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
_10<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
_v<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
.10<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
_v10<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
ls()
object()
objects()
rm (a, C1, myname, zz)
rm (a, C1, myname, ZZ)
x<- rnorm (100)
mean(x)
vars10<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
.v10<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
.v6<-c(1, 2, 3, 4, 5, 6)
ls()
objects()
rm (vars10, x)
A5<-c(10, 20, 30, 40, 50)
a5<-c(11, 22, 33, 44, 55)
EDPS845allusers <- c ("Tony"  "Yage"  "Jayden"  "Mingying(Emily)" "Catherine (katie)" "Pamela (Pam)" "Liuhan (Sophie)"  "Mark"  "Brooke" "Chansuk"  "Benjamin (Ben)" )
EDPS845allusers <- c("Tony"  "Yage"  "Jayden"  "Mingying(Emily)" "Catherine (katie)" "Pamela (Pam)" "Liuhan (Sophie)"  "Mark"  "Brooke" "Chansuk"  "Benjamin (Ben)")
EDPS850students <- c("Emily" "Tony" "Katie")
ournames <- c("Emily", "Tony", "Katie")
EDPS845allusers <- c("Tony",  "Yage",  "Jayden",  "Mingying(Emily)", "Catherine (katie)", "Pamela (Pam)", "Liuhan (Sophie)",  "Mark", "Brooke", "Chansuk", "Benjamin (Ben)")
EDPS850students <- c("Yage",  "Jayden",  "Mingying(Emily)", "Catherine (katie)", "Pamela (Pam)", "Liuhan (Sophie)",  "Mark", "Brooke", "Chansuk", "Benjamin (Ben)")
EDPS845students <- c("Yage",  "Jayden",  "Mingying(Emily)", "Catherine (katie)", "Pamela (Pam)", "Liuhan (Sophie)",  "Mark", "Brooke", "Chansuk", "Benjamin (Ben)")
rm(vars10, x, EDPS845allusers)
x<- rnorm (100)
vars10<-c(1, 3, 5, 7, 9, 2, 4, 6, 8, 10)
myname <- "Emily"
EDPS845allusers <- c("Tony",  "Yage",  "Jayden",  "Mingying(Emily)", "Catherine (katie)", "Pamela (Pam)", "Liuhan (Sophie)",  "Mark", "Brooke", "Chansuk", "Benjamin (Ben)")
?qt
x1 <- c(4, -11, 2001)
x1
state <- c("tas", "sa", "qld", "nsw", "nsw", "nt", "wa", "wa",
"qld", "vic", "nsw", "vic", "qld", "qld", "sa", "tas",
"sa", "nt", "wa", "vic", "qld", "nsw", "nsw", "wa",
"sa", "act", "nsw", "vic", "vic", "act")
statef <- factor(state)
table(statef)
incomes <- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56,
61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46,
59, 46, 58, 43)
incmeans <- tapply(incomes, statef, mean)
stderr <- function(x) sqrt(var(x)/length(x))
incster <- tapply(incomes, statef, stderr)
incster
data.frame(i = incomes, s = statef)
ns <- table(statef)
qt (.025, ns - 1 )
qt
library ("ggplot2")
ns <- table(statef)
cis <- data.frame(lower = qt (.25, ns - 1),
upper = qt(.25, ns - 1, lower.tail = FALSE))
ggplot(cis, aes(mean, state))
cis <- data.frame(mean = incomes, stderr =  incster,
state = names(incmeans),
lower = qt (.25, ns - 1),
upper = qt(.25, ns - 1, lower.tail = FALSE))
ns <- table(statef)
cis <- data.frame(mean = incmeans, stderr =  incster,
state = names(incmeans),
lower = qt (.25, ns - 1),
upper = qt(.25, ns - 1, lower.tail = FALSE))
library ("ggplot2")
ggplot(cis, aes(state, mean) + geom_point() +
geom_errorbar())
nsnew <- ns
dim(nsnew) <- c(1,8)
nsnew
c(nsnew)
attributes(nsnew)
dim(nsnew) <- NULL
nsnew
colnames(cis)
cis$lower.Freq <- NULL
cis$lower.Freq
head(cis)
assign("x2", c(1, -2, 3, -4, 5, -6))
names(myvector)
myvector <- c(2, 5, 6, 3, 8, 9)
names(myvector)
cis
head(cis)
cis[1:2, 1:5]
cis[c("act", "nsw"), c("state")]
cis[c("act", "nsw"), c("state", "stderr")]
cis$mean
cis$mean > 50
subset(cis, cis$mean > 50)
cis[cis$mean > 50 & cis$stderr < 1,]
subset(cis, cis$mean > 50, cis$stderr < 1)
subset(cis, mean > 50, cis$stderr < 1)
subset(cis, mean > 50 & cis$stderr < 1)
myarray <- rnorm(1000)
dim(myarray)
dim(myarray) <- c(10, 10, 10)
myarray[1, 1, 1:10]
myarray[1, 1, 1]
ifelse (temp == TRUE, 1, 0)
temp <- cis$mean > 50
temp <- cis$mean > 50
ifelse (temp == TRUE, 1, 0)
temp
ifelse(temp, 1, 0)
sum(temp)
ifelse(c(0, 0, 1), 0, 1)
table(temp)
table(temp)
cis
statef
table(statef)
statef == "sa"
sum(statef == "sa")
tempmiss <- c(1, 2, 3, NA, NA, 6, 7)
tempmiss
is.na(tempmiss)
sum(is.na(tempmiss))
library("epmr")
install.packages("epmr")
library("epmr")
sumcomp(tempmiss)
temp
qt
lower.tail <- TRUE
if(!lower.tail)
if(!lower.tail)+ (upper.tri())
incomes
statef
for(state in statef) {
print(mean(incomes[statef == state]))
}
incmeans <- tapply(incomes, statef, mean)
incmeans
for(i in levels(statef) {
print(mean(incomes[statef == state], "\n"))
}
for(i in levels(statef)) {
print(mean(incomes[statef == state], "\n"))
}
for(i in levels(statef)) {
cat(i, mean(incomes[statef == i], "\n"))
}
cat("Heading for my output\n\nSome output")
for(i in unique(statef)) {
cat(i, mean(incomes[statef == i], "\n"))
}
?sapply
for(i in unique(statef)) {
cat(i, mean(incomes[statef == i], "\n")
}
sapply(levels(statef), nchar)
sapply(levels(statef), function(i) mean(incomes[statef == i]))
states <- levels(statef)
mymeans <- numeric(length = length(states))
for(i in unique(statef)) {
cat(i, mean(incomes[statef == i], "\n"))
}
mymeans <- numeric(length = length(states))
for(i in states) {
mymeans[i] <- mean(incomes[statef == i])
}
i <- "act"
mymeans
names(mymeans) <- states
for(i in states) {
mymeans[i] <- mean(incomes[statef == i])
}
mymeans
mymse <- data.frame(matrix(nrow = length(states),
ncol = 2), row.names = states)
for(i in states) {
mymse$m[i, "m"] <- mean(incomes[statef == i])
mymse$m[i, "se"] <- stderr(incomes[statef == i])
}
mymse <- data.frame(matrix(nrow = length(states),
ncol = 2), row.names = states)
colnames(mymse) <- c("m", "se")
for(i in states) {
mymse$m[i, "m"] <- mean(incomes[statef == i])
mymse$m[i, "se"] <- stderr(incomes[statef == i])
}
t(sapply(levels(statef), function(i)
c(m = mean(incomes[statef == i]),
se = stdeff(incomes[statef == i]))))
mymse
"dv ~ iv1 + iv2 + iv3 + iv1:iv2 + iv2:iv3"
myform <- formula (dv ~ iv1 + iv2 + iv3 + iv1:iv2 + iv2:iv3)
myform
myform <- formula (dv ~ iv1*iv2)
myform
?lm
library ("equate")
tempdat <- KBneat$x
head(tempdat)
str(tempdat)
lm(total ~ 1 + anchor, data = tempdat)
out <- lm(total ~ 1 + anchor, data = tempdat)
out
fitted
getS3method("fitted")
methods("fitted")
?getS3method
?fitted
coef(out)
?presmoothing
presmoothing.formula <-function (x, ...).
range(tempdat[, 2])
plot(0:36, 0:12, type = "n")
plot (c(0:36), c(0: 12), type = "n")
points(tempdat[,1], tempdat[,2])
lines(tempdat[,1], tempdat[,2])
title(main = "my plot")
range(tempdat[, 2])
plot(0:36, 0:12, type = "n")
plot (c(0:36), c(0: 12), type = "n")
points(tempdat[,1], tempdat[,2])
sd
?sd
library ("psych")
library ("epmr")
install.packages("devtools")
devtools::install_github("talbano/epmr")
library ("epmr")
library ("devtools")
library (ltm)
rdat <- sim.rasch(nvar = 5, n = 500, low = -3, high = 3, d = NULL,
a = 1, mu = 0, sd =1)
rdat
rout <- rasch(rdat$items, constraint = cbind(ncol(rdat$items) +1, 1))
rout
rtheta <- factor.scores(rout)
rtheta
psych:: sim.rasch
psych:: sim.2pl
psych:: sim.1pl
psych:: ICC
